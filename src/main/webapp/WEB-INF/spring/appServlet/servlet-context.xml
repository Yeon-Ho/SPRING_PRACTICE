<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- aop annotation 사용 -->
	<aop:aspectj-autoproxy />
	
	<!--
	proxy-target-class="true"
		interface 대신 상속을 활용해서 프록시 객체를 생성한다.
		상속을 활용하기 때문에, 타깃클래스(부모클래스)의 기본 생성자가
		프록시 객체가 생성될 때마다 반복적으로 호출된다.
		예를 들어 타깃클래스의 기본 생성자에서 상수가 초기화되는 경우
		에러가 발생할 수 있다.
	--> 
	<tx:annotation-driven proxy-target-class="false" />
	
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- root-context.xml이 servlet-context.xml보다 먼저 읽히기 때문에 dataSource 참조 가능 -->
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 이름이 insert로 시작하는 모든 메소드 -->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception.class, common.exception.CustomException" /> <!-- Exception or Exception.class, -->
			<!-- 이름이 select로 시작하는 모든 메소드 -->
			<tx:method name="select*" />
			<!-- 이름이 update로 시작하는 모든 메소드 -->
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception.class, common.exception.CustomException" />
			<!-- 이름이 delete로 시작하는 모든 메소드 -->
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception.class, common.exception.CustomException" />
			<!--
			Custom Exception이 발생했을 때 트랜잭션 관리를 스프링으로 하기 위해서는
			해당 Exception이 Exception을 상속받고 있더라도!
			정확하게 rollback-for 속성에 해당 Exception을 등록해야한다.
			-->
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<!-- 접근제한자(생략가능) 반환형(필수) 패키지(생략가능).클래스명(생략가능).메소드(필수)(매개변수(필수)) -->
		<aop:pointcut expression="execution(* com.kh.welcome..*.*ServiceImpl.*(..))" id="requiredTx" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx" />
	</aop:config>
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<beans:bean name="logAop" class="common.aop.LogAop" />
	
	<!-- Interceptor 등록 -->
	<interceptors>
		<interceptor>
			<!-- 모든 요청이 Interceptor를 거치도록 작성 -->
			<mapping path="/**" />
			<beans:bean class="common.interceptor.AuthInterceptor" />
		</interceptor>
	</interceptors>
	
	
	<context:component-scan base-package="com.yeon.www" />
	
	
	
</beans:beans>
